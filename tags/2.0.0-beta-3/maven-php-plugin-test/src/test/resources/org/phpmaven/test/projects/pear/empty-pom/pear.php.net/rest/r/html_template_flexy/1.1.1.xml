<?xml version="1.0" encoding="UTF-8" ?>
<r xmlns="http://pear.php.net/dtd/rest.release"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xsi:schemaLocation="http://pear.php.net/dtd/rest.release
    http://pear.php.net/dtd/rest.release.xsd">
 <p xlink:href="/rest/p/html_template_flexy">HTML_Template_Flexy</p>
 <c>pear.php.net</c>
 <v>1.1.1</v>
 <st>stable</st>
 <l>PHP License</l>
 <m>alan_k</m>
 <s>An extremely powerful Tokenizer driven Template engine</s>
 <d>HTML_Template_Flexy started it's life as a simplification of HTML_Template_Xipe, 
however in Version 0.2, It became one of the first template engine to use a real Lexer,
rather than regex'es, making it possible to do things like ASP.net or Cold Fusion tags. 
However, it still has a very simple set of goals.
- Very Simple API, 
   o easy to learn...
   o prevents to much logic going in templates
- Easy to write document'able code
   o By using object vars for a template rather than 'assign', you 
     can use phpdoc comments to list what variable you use.
- Editable in WYSIWYG editors
   o you can create full featured templates, that doesnt get broken every time you edit with 
     Dreamweaver(tm) or Mozzila editor
   o Uses namespaced attributes to add looping/conditionals  
- Extremely Fast, 
   o runtime is at least 4 time smaller than most other template engines (eg. Smarty)
   o uses compiled templates, as a result it is many times faster on blocks and loops than 
     than Regex templates (eg. IT/phplib)
- Safer (for cross site scripting attacks)
   o All variables default to be output as HTML escaped (overridden with the :h modifier)
- Multilanguage support
   o Parses strings out of template, so you can build translation tools
   o Compiles language specific templates (so translation is only done once, not on every request)
- Full dynamic element support (like ASP.NET), so you can pick elements to replace at runtime

Features:
- {variable} to echo $object-&gt;variable
- {method()} to echo $object-&gt;method();
- {foreach:var,key,value} to PHP foreach loops
- tag attributes FLEXY:FOREACH, FLEXY:IF for looping and conditional HTML inclusion
- {if:variable} to PHP If statement
- {if:method()} to PHP If statement
- {else:} and {end:} to close or alternate If statements
- FORM to HTML_Template_Flexy_Element's
- replacement of INPUT, TEXTAREA and SELECT tags with HTML_Template_Flexy_Element code
  use FLEXY:IGNORE (inherited) and FLEXY:IGNOREONLY (single) to prevent replacements
- FLEXY:START/FLEXY:STARTCHILDREN tags to define where template starts/finishes
- support for urlencoded braces {} in HTML attributes.  
- documentation in the pear manual

- examples at http://cvs.php.net/cvs.php/pear/HTML_Template_Flexy/tests/

** The long term plan for Flexy is to be integrated as a backend for the 
Future Template Package (A BC wrapper will be made available - as I need 
to use it too!)
</d>
 <da>2004-12-24 00:31:32</da>
 <n>Minor Feature Release
 
 Changes
  Note: This release does break BC in templates using the Translation tools,
  (which since they are undocumented should really be regarded as beta I guess.).
  
  Support for Conversion of 
  &lt;b&gt;this is {atag} in a sentence&lt;/b&gt;
  
  to a translatable string:
  &quot;this is %s in a sentence&quot;
  
  Is now NOT supported, it will result in 2 strings
  &quot;this is&quot;
  &quot;in a sentence&quot;
          
  To effect a similar result, the translation markers should 
  now be used:
  
  &lt;b&gt;{_(this is {atag} in a sentence)_}&lt;/b&gt;
  
  will convert into a translatable string
  &quot;this is {atag} in a sentence&quot;
 
 
 Features / Fixes
  #------ support for translatable markers in html attributes added:
          eg. &lt;a href=&quot;{_(http://www.example.com)_}&quot;&gt;.....
  #3003   {var} replaced with %s - fixed by removing all string merging code.</n>
 <f>104834</f>
 <g>http://pear.php.net/get/HTML_Template_Flexy-1.1.1</g>
 <x xlink:href="package.1.1.1.xml"/>
</r>